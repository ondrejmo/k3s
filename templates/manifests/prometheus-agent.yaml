{% for item in k3s_metric_targets %}
---

apiVersion: v1
kind: Secret
metadata:
  name: prometheus-agent-remotewrite-{{ item.url | urlsplit("hostname") | replace(".", "-") }}
  namespace: monitoring-system

stringData:
  user: "{{ item.user }}"
  pass: "{{ item.pass }}"

{% endfor %}
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-agent
  namespace: monitoring-system

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-agent

rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - nodes/metrics
    verbs:
      - get

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-agent

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-agent
subjects:
  - kind: ServiceAccount
    name: prometheus-agent
    namespace: monitoring-system

---

apiVersion: v1
kind: Service
metadata:
  name: prometheus-agent
  namespace: monitoring-system
  labels:
    app.kubernetes.io/name: prometheus-agent

spec:
  selector:
    app.kubernetes.io/name: prometheus-agent
  ports:
    - name: http
      port: 9090
    - name: http-reloader
      port: 8081

---

apiVersion: monitoring.coreos.com/v1alpha1
kind: PrometheusAgent
metadata:
  name: prometheus-agent
  namespace: monitoring-system

spec:
  version: v{{ k3s_components.prometheus }}
  replicas: 1
  logLevel: info
  logFormat: logfmt
  scrapeInterval: 30s

  serviceAccountName: prometheus-agent

  tsdb:
    outOfOrderTimeWindow: 30m

  enableOTLPReceiver: true
  enableFeatures:
    - exemplar-storage

  externalLabels:
    cluster: {{ k3s_name }}

  remoteWrite:
{% for item in k3s_metric_targets %}
    - url: {{ item.url }}
      sendExemplars: true
      messageVersion: V2.0
      basicAuth:
          username:
            name: prometheus-agent-remotewrite-{{ item.url | urlsplit("hostname") | replace(".", "-") }}
            key: user
          password:
            name: prometheus-agent-remotewrite-{{ item.url | urlsplit("hostname") | replace(".", "-") }}
            key: pass
      tlsConfig:
        ca:
          configMap:
            name: trusted-ca-bundle
            key: ca-certificates.crt
{% endfor %}

  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 2000
    seccompProfile:
      type: RuntimeDefault

  initContainers:
    - name: init-config-reloader
      securityContext:
        allowPrivilegeEscalation: false
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop:
            - ALL

  containers:
    - name: prometheus
      securityContext:
        allowPrivilegeEscalation: false
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop:
            - ALL
    - name: config-reloader
      securityContext:
        allowPrivilegeEscalation: false
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop:
            - ALL

  resources:
    requests:
      cpu: 20m
      memory: 1024Mi

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - topologyKey: kubernetes.io/hostname
          labelSelector:
            matchExpressions:
              - {key: app.kubernetes.io/name, operator: In, values: [prometheus-agent]}
              - {key: prometheus, operator: In, values: [prometheus-agent]}

  # agent reads all
  podMonitorNamespaceSelector: {}
  podMonitorSelector: {}
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector: {}
  probeNamespaceSelector: {}
  probeSelector: {}

  # each Prometheus reads only those in his namespace
  scrapeConfigNamespaceSelector:
    matchLabels:
      kubernetes.io/metadata.name: monitoring-system
  scrapeConfigSelector: {}

---

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: prometheus-agent
  namespace: monitoring-system

spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-agent
  endpoints:
    - port: http
    # port: http-reloader
