---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vector-events
  namespace: monitoring-system

spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: vector-events
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 80

---

apiVersion: v1
kind: Secret
metadata:
  name: vector-events
  namespace: monitoring-system
  annotations:
    kubernetes.io/service-account.name: vector-events

type: kubernetes.io/service-account-token

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-events-config
  namespace: monitoring-system

data:
  vector-events.yml: |
    ---

    timezone: Europe/Prague

    data_dir: /var/lib/vector

    api:
      address: 0.0.0.0:8686
      playground: false
      enabled: true

    sources:
      metrics:
        type: internal_metrics

      logs:
        type: internal_logs

      events:
        type: http_client
        endpoint: https://kubernetes.default.svc:443/api/v1/events
        scrape_interval_secs: 30
        decoding:
          codec: json
        auth:
          strategy: bearer
          token: "${KUBE_TOKEN}"
        tls:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        headers:
          Accept:
            - application/json

      hooks:
        type: http_server
        address: 0.0.0.0:80
        encoding: json
        strict_path: false
    transforms:
      label_vector_logs:
        type: remap
        inputs: [ logs ]
        source: |-
          .tag = "vector"
          .type = "vector-events"
          .cluster = "{{ k3s_name }}"

      label_vector_metrics:
        type: remap
        inputs: [ metrics ]
        source: |-
          .tags.job = "vector"
          .tags.type = "vector-events"
          .tags.cluster = "{{ k3s_name }}"

      split_events:
        type: remap
        inputs: [ events ]
        source: |-
          . = array!(.items)

      dedupe_events:
        type: dedupe
        inputs: [ split_events ]
        fields:
          match:
            - metadata.uid

      label_events:
        type: remap
        inputs: [ dedupe_events ]
        source: |-
          .tag = "event"
          .cluster = "{{ k3s_name }}"

      label_hooks:
        type: remap
        inputs: [ hooks ]
        source: |-
          .tag = "hook"
          .cluster = "{{ k3s_name }}"

    sinks:
{% for item in k3s_log_targets %}
      {{ item.host | replace(".", "__") }}:
        type: vector
        inputs: [ label_vector_logs, label_vector_metrics, label_events, label_hooks ]
        address: {{ item.host }}:{{ item.port }}
        compression: true
        buffer:
          type: disk
          max_size: 2147483648 # 2Gi
          when_full: block
{% if item.tls %}
        tls:
          enabled: true
          ca_file: /etc/ssl/certs/ca-certificates.crt
{% endif %}
{% endfor %}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: vector-events
  namespace: monitoring-system

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vector-events

rules:
  - apiGroups:
      - "*"
    resources:
      - events
    verbs:
      - get
      - list

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vector-events

subjects:
  - kind: ServiceAccount
    name: vector-events
    namespace: monitoring-system
roleRef:
  kind: ClusterRole
  name: vector-events

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vector-events-buffer
  namespace: monitoring-system

spec:
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---

apiVersion: v1
kind: Service
metadata:
  name: vector-events
  namespace: monitoring-system
  labels:
    app.kubernetes.io/name: vector-events

spec:
  selector:
    app.kubernetes.io/name: vector-events
  ports:
    - name: http
      port: 80
    - name: api
      port: 8686

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: vector-events
  namespace: monitoring-system

spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: vector-events
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vector-events
        # DISCLAIMER: logs are collected internally
        vector.dev/exclude: "true"
    spec:
      serviceAccount: vector-events
      terminationGracePeriodSeconds: 60
      containers:
        - name: vector
          image: timberio/vector:{{ k3s_components.vector }}-debian
          args:
            - -w
            - --config-dir
            - /etc/vector/
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
            runAsGroup: 2000
            runAsUser: 2000
          resources:
            requests:
              cpu: 20m
              memory: 128Mi
          env:
            - name: VECTOR_LOG
              value: info
            - name: KUBE_TOKEN
              valueFrom:
                secretKeyRef:
                  name: vector-events
                  key: token
          ports:
            - name: api
              containerPort: 8686
          readinessProbe:
            httpGet:
              path: /health
              port: 8686
          livenessProbe:
            httpGet:
              path: /health
              port: 8686
          volumeMounts:
            - name: config
              mountPath: /etc/vector
            - name: buffer
              mountPath: /var/lib/vector
      volumes:
        - name: config
          configMap:
            name: vector-events-config
        - name: buffer
          persistentVolumeClaim:
            claimName: vector-events-buffer
